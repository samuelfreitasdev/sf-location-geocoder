/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables


import org.jooq.*
import org.jooq.generated.Public
import org.jooq.generated.keys.GEOCODER_SOLUTION_REQUEST__FK_SOLVER_REQUEST_KEY
import org.jooq.generated.keys.GEOCODER_SOLVER_REQUEST_PKEY
import org.jooq.generated.keys.GEOCODER_SOLVER_REQUEST__FK_PROBLEM_ID
import org.jooq.generated.tables.GeocoderProblem.GeocoderProblemPath
import org.jooq.generated.tables.GeocoderSolutionRequest.GeocoderSolutionRequestPath
import org.jooq.generated.tables.records.GeocoderSolverRequestRecord
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import java.time.Instant
import java.util.*


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class GeocoderSolverRequest(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, GeocoderSolverRequestRecord>?,
    parentPath: InverseForeignKey<out Record, GeocoderSolverRequestRecord>?,
    aliased: Table<GeocoderSolverRequestRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<GeocoderSolverRequestRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.geocoder_solver_request</code>
         */
        val GEOCODER_SOLVER_REQUEST: GeocoderSolverRequest = GeocoderSolverRequest()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<GeocoderSolverRequestRecord> = GeocoderSolverRequestRecord::class.java

    /**
     * The column <code>public.geocoder_solver_request.request_key</code>.
     */
    val REQUEST_KEY: TableField<GeocoderSolverRequestRecord, UUID?> = createField(DSL.name("request_key"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.geocoder_solver_request.problem_id</code>.
     */
    val PROBLEM_ID: TableField<GeocoderSolverRequestRecord, Long?> = createField(DSL.name("problem_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.geocoder_solver_request.solver</code>.
     */
    val SOLVER: TableField<GeocoderSolverRequestRecord, String?> = createField(DSL.name("solver"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    /**
     * The column <code>public.geocoder_solver_request.status</code>.
     */
    val STATUS: TableField<GeocoderSolverRequestRecord, String?> = createField(DSL.name("status"), SQLDataType.VARCHAR(20).nullable(false), this, "")

    /**
     * The column <code>public.geocoder_solver_request.created_at</code>.
     */
    val CREATED_AT: TableField<GeocoderSolverRequestRecord, Instant?> = createField(DSL.name("created_at"), SQLDataType.INSTANT.nullable(false), this, "")

    /**
     * The column <code>public.geocoder_solver_request.updated_at</code>.
     */
    val UPDATED_AT: TableField<GeocoderSolverRequestRecord, Instant?> = createField(DSL.name("updated_at"), SQLDataType.INSTANT.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<GeocoderSolverRequestRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<GeocoderSolverRequestRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<GeocoderSolverRequestRecord>?, where: Condition): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.geocoder_solver_request</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.geocoder_solver_request</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.geocoder_solver_request</code> table reference
     */
    constructor(): this(DSL.name("geocoder_solver_request"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, GeocoderSolverRequestRecord>?, parentPath: InverseForeignKey<out Record, GeocoderSolverRequestRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, GEOCODER_SOLVER_REQUEST, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class GeocoderSolverRequestPath : GeocoderSolverRequest, Path<GeocoderSolverRequestRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, GeocoderSolverRequestRecord>?, parentPath: InverseForeignKey<out Record, GeocoderSolverRequestRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<GeocoderSolverRequestRecord>): super(alias, aliased)
        override fun `as`(alias: String): GeocoderSolverRequestPath = GeocoderSolverRequestPath(DSL.name(alias), this)
        override fun `as`(alias: Name): GeocoderSolverRequestPath = GeocoderSolverRequestPath(alias, this)
        override fun `as`(alias: Table<*>): GeocoderSolverRequestPath = GeocoderSolverRequestPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<GeocoderSolverRequestRecord> = GEOCODER_SOLVER_REQUEST_PKEY
    override fun getReferences(): List<ForeignKey<GeocoderSolverRequestRecord, *>> = listOf(GEOCODER_SOLVER_REQUEST__FK_PROBLEM_ID)

    private lateinit var _geocoderProblem: GeocoderProblemPath

    /**
     * Get the implicit join path to the <code>public.geocoder_problem</code>
     * table.
     */
    fun geocoderProblem(): GeocoderProblemPath {
        if (!this::_geocoderProblem.isInitialized)
            _geocoderProblem = GeocoderProblemPath(this, GEOCODER_SOLVER_REQUEST__FK_PROBLEM_ID, null)

        return _geocoderProblem;
    }

    val geocoderProblem: GeocoderProblemPath
        get(): GeocoderProblemPath = geocoderProblem()

    private lateinit var _geocoderSolutionRequest: GeocoderSolutionRequestPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.geocoder_solution_request</code> table
     */
    fun geocoderSolutionRequest(): GeocoderSolutionRequestPath {
        if (!this::_geocoderSolutionRequest.isInitialized)
            _geocoderSolutionRequest = GeocoderSolutionRequestPath(this, null, GEOCODER_SOLUTION_REQUEST__FK_SOLVER_REQUEST_KEY.inverseKey)

        return _geocoderSolutionRequest;
    }

    val geocoderSolutionRequest: GeocoderSolutionRequestPath
        get(): GeocoderSolutionRequestPath = geocoderSolutionRequest()
    override fun `as`(alias: String): GeocoderSolverRequest = GeocoderSolverRequest(DSL.name(alias), this)
    override fun `as`(alias: Name): GeocoderSolverRequest = GeocoderSolverRequest(alias, this)
    override fun `as`(alias: Table<*>): GeocoderSolverRequest = GeocoderSolverRequest(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): GeocoderSolverRequest = GeocoderSolverRequest(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): GeocoderSolverRequest = GeocoderSolverRequest(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): GeocoderSolverRequest = GeocoderSolverRequest(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition): GeocoderSolverRequest = GeocoderSolverRequest(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): GeocoderSolverRequest = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition): GeocoderSolverRequest = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>): GeocoderSolverRequest = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): GeocoderSolverRequest = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): GeocoderSolverRequest = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): GeocoderSolverRequest = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): GeocoderSolverRequest = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): GeocoderSolverRequest = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): GeocoderSolverRequest = where(DSL.notExists(select))
}
