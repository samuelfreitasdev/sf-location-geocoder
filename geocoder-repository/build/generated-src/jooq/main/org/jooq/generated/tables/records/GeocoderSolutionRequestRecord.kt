/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.records


import org.jooq.JSON
import org.jooq.Record1
import org.jooq.generated.tables.GeocoderSolutionRequest
import org.jooq.impl.UpdatableRecordImpl
import java.time.Instant
import java.util.*


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class GeocoderSolutionRequestRecord private constructor() : UpdatableRecordImpl<GeocoderSolutionRequestRecord>(GeocoderSolutionRequest.GEOCODER_SOLUTION_REQUEST) {

    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var problemId: Long
        set(value): Unit = set(1, value)
        get(): Long = get(1) as Long

    open var requestKey: UUID?
        set(value): Unit = set(2, value)
        get(): UUID? = get(2) as UUID?

    open var status: String
        set(value): Unit = set(3, value)
        get(): String = get(3) as String

    open var result: JSON
        set(value): Unit = set(4, value)
        get(): JSON = get(4) as JSON

    open var createdAt: Instant
        set(value): Unit = set(5, value)
        get(): Instant = get(5) as Instant

    open var updatedAt: Instant
        set(value): Unit = set(6, value)
        get(): Instant = get(6) as Instant

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    /**
     * Create a detached, initialised GeocoderSolutionRequestRecord
     */
    constructor(id: Long? = null, problemId: Long, requestKey: UUID? = null, status: String, result: JSON, createdAt: Instant, updatedAt: Instant): this() {
        this.id = id
        this.problemId = problemId
        this.requestKey = requestKey
        this.status = status
        this.result = result
        this.createdAt = createdAt
        this.updatedAt = updatedAt
        resetChangedOnNotNull()
    }
}
