/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables


import org.jooq.*
import org.jooq.generated.Public
import org.jooq.generated.keys.GEOCODER_PROBLEM_PKEY
import org.jooq.generated.keys.GEOCODER_SOLUTION_REQUEST__FK_PROBLEM_ID
import org.jooq.generated.keys.GEOCODER_SOLUTION__FK_GEOCODER_PROBLEM_ID
import org.jooq.generated.keys.GEOCODER_SOLVER_REQUEST__FK_PROBLEM_ID
import org.jooq.generated.tables.GeocoderSolution.GeocoderSolutionPath
import org.jooq.generated.tables.GeocoderSolutionRequest.GeocoderSolutionRequestPath
import org.jooq.generated.tables.GeocoderSolverRequest.GeocoderSolverRequestPath
import org.jooq.generated.tables.records.GeocoderProblemRecord
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import java.time.Instant


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class GeocoderProblem(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, GeocoderProblemRecord>?,
    parentPath: InverseForeignKey<out Record, GeocoderProblemRecord>?,
    aliased: Table<GeocoderProblemRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<GeocoderProblemRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.geocoder_problem</code>
         */
        val GEOCODER_PROBLEM: GeocoderProblem = GeocoderProblem()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<GeocoderProblemRecord> = GeocoderProblemRecord::class.java

    /**
     * The column <code>public.geocoder_problem.id</code>.
     */
    val ID: TableField<GeocoderProblemRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.geocoder_problem.name</code>.
     */
    val NAME: TableField<GeocoderProblemRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "")

    /**
     * The column <code>public.geocoder_problem.points</code>.
     */
    val POINTS: TableField<GeocoderProblemRecord, JSON?> = createField(DSL.name("points"), SQLDataType.JSON.nullable(false), this, "")

    /**
     * The column <code>public.geocoder_problem.created_at</code>.
     */
    val CREATED_AT: TableField<GeocoderProblemRecord, Instant?> = createField(DSL.name("created_at"), SQLDataType.INSTANT.nullable(false), this, "")

    /**
     * The column <code>public.geocoder_problem.updated_at</code>.
     */
    val UPDATED_AT: TableField<GeocoderProblemRecord, Instant?> = createField(DSL.name("updated_at"), SQLDataType.INSTANT.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<GeocoderProblemRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<GeocoderProblemRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<GeocoderProblemRecord>?, where: Condition): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.geocoder_problem</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.geocoder_problem</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.geocoder_problem</code> table reference
     */
    constructor(): this(DSL.name("geocoder_problem"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, GeocoderProblemRecord>?, parentPath: InverseForeignKey<out Record, GeocoderProblemRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, GEOCODER_PROBLEM, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class GeocoderProblemPath : GeocoderProblem, Path<GeocoderProblemRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, GeocoderProblemRecord>?, parentPath: InverseForeignKey<out Record, GeocoderProblemRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<GeocoderProblemRecord>): super(alias, aliased)
        override fun `as`(alias: String): GeocoderProblemPath = GeocoderProblemPath(DSL.name(alias), this)
        override fun `as`(alias: Name): GeocoderProblemPath = GeocoderProblemPath(alias, this)
        override fun `as`(alias: Table<*>): GeocoderProblemPath = GeocoderProblemPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<GeocoderProblemRecord, Long?> = super.getIdentity() as Identity<GeocoderProblemRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<GeocoderProblemRecord> = GEOCODER_PROBLEM_PKEY

    private lateinit var _geocoderSolution: GeocoderSolutionPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.geocoder_solution</code> table
     */
    fun geocoderSolution(): GeocoderSolutionPath {
        if (!this::_geocoderSolution.isInitialized)
            _geocoderSolution = GeocoderSolutionPath(this, null, GEOCODER_SOLUTION__FK_GEOCODER_PROBLEM_ID.inverseKey)

        return _geocoderSolution;
    }

    val geocoderSolution: GeocoderSolutionPath
        get(): GeocoderSolutionPath = geocoderSolution()

    private lateinit var _geocoderSolutionRequest: GeocoderSolutionRequestPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.geocoder_solution_request</code> table
     */
    fun geocoderSolutionRequest(): GeocoderSolutionRequestPath {
        if (!this::_geocoderSolutionRequest.isInitialized)
            _geocoderSolutionRequest = GeocoderSolutionRequestPath(this, null, GEOCODER_SOLUTION_REQUEST__FK_PROBLEM_ID.inverseKey)

        return _geocoderSolutionRequest;
    }

    val geocoderSolutionRequest: GeocoderSolutionRequestPath
        get(): GeocoderSolutionRequestPath = geocoderSolutionRequest()

    private lateinit var _geocoderSolverRequest: GeocoderSolverRequestPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.geocoder_solver_request</code> table
     */
    fun geocoderSolverRequest(): GeocoderSolverRequestPath {
        if (!this::_geocoderSolverRequest.isInitialized)
            _geocoderSolverRequest = GeocoderSolverRequestPath(this, null, GEOCODER_SOLVER_REQUEST__FK_PROBLEM_ID.inverseKey)

        return _geocoderSolverRequest;
    }

    val geocoderSolverRequest: GeocoderSolverRequestPath
        get(): GeocoderSolverRequestPath = geocoderSolverRequest()
    override fun `as`(alias: String): GeocoderProblem = GeocoderProblem(DSL.name(alias), this)
    override fun `as`(alias: Name): GeocoderProblem = GeocoderProblem(alias, this)
    override fun `as`(alias: Table<*>): GeocoderProblem = GeocoderProblem(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): GeocoderProblem = GeocoderProblem(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): GeocoderProblem = GeocoderProblem(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): GeocoderProblem = GeocoderProblem(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition): GeocoderProblem = GeocoderProblem(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): GeocoderProblem = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition): GeocoderProblem = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>): GeocoderProblem = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): GeocoderProblem = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): GeocoderProblem = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): GeocoderProblem = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): GeocoderProblem = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): GeocoderProblem = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): GeocoderProblem = where(DSL.notExists(select))
}
